// jscs:disable requireMultipleVarDecl
// jscs:disable requireVarDeclFirst
/* global module require */

module.exports = (function () {

    "use strict";

    var serverInstance = null;
    var logger = null;

    var constructor = function SimpleProxy(proxyPort, myLogger) { // eslint-disable-line no-shadow
        this.proxyPort = proxyPort;
        logger = myLogger ? myLogger : {log: function () {}};
    };
    var proto = constructor.prototype;

    proto.start = function () {

        var httpProxy = require("http-proxy");
        var http = require("http");
        var url = require("url");
        var net = require("net");

        logger.log("SimpleProxy is starting on port " + this.proxyPort);

        serverInstance = http.createServer(function (req, res) {
            var urlObj = url.parse(req.url);
            var target = urlObj.protocol + "//" + urlObj.host;

            var proxyInstance = httpProxy.createProxyServer({});
            proxyInstance.on("error", function (err) {
                logger.log("PROXY ERROR :", err);
                res.end();
            });
            proxyInstance.web(req, res, { target: target });

        }).listen(this.proxyPort);

        var portRegEx = /^([^:]+)(:([0-9]+))?$/;

        var getHostPortFromString = function (hostString, defaultPort) {

            var host = hostString;
            var port = defaultPort;

            var result = portRegEx.exec(hostString);
            if (result != null) {
                host = result[1];
                if (result[2] != null) {
                    port = result[3];
                }
            }

            return ([host, port]);
        };

        serverInstance.addListener("connect", function (req, socket, bodyhead) {

            var hostPort = getHostPortFromString(req.url, 443);
            var hostDomain = hostPort[0];
            var port = parseInt(hostPort[1]);

            logger.log("Proxying HTTPS request for :", req.url);

            var proxySocket = new net.Socket();
            proxySocket.connect(port, hostDomain, function () {
                proxySocket.write(bodyhead);
                socket.write("HTTP/" + req.httpVersion + " 200 Connection established\r\n\r\n");
            });

            proxySocket.on("data", function (chunk) {
                socket.write(chunk);
            });

            proxySocket.on("end", function () {
                socket.end();
            });

            proxySocket.on("error", function () {
                socket.write("HTTP/" + req.httpVersion + " 500 Connection error\r\n\r\n");
                socket.end();
            });

            socket.on("data", function (chunk) {
                proxySocket.write(chunk);
            });

            socket.on("end", function () {
                proxySocket.end();
            });

            socket.on("error", function () {
                proxySocket.end();
            });

        });

        serverInstance.on("connection", function (socket) {
            socket.setTimeout(5000);
        });

    };
    proto.stop = function () {
        if (serverInstance !== null) {
            serverInstance.close(function () {
                logger.log("SimpleProxy is shutting down");
            });
        } else {
            logger.log("SimpleProxy was not started");
        }
    };


    return constructor;
})();
